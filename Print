term.clear()
term.setCursorPos(1,1)
if not fs.exists(".lmnet/apis/ui") then
	if not fs.exists(".lmnet/apis") then
		if not fs.exists(".lmnet") then
			fs.makeDir(".lmnet")
		end
		fs.makeDir(".lmnet/apis")
	end
	if not http then
		printError("HTTP not enabled.")
		return
	end
	local remote = http.get("https://raw.github.com/MultHub/LMNet-OS/master/src/apis/ui.lua")
	if not remote then
		printError("Error getting required API. Please try again later.")
		return
	end
	local file = fs.open(".lmnet/apis/ui", "w")
	file.write(remote.readAll())
	file.close()
	remote.close()
end
local tArgs = {...}
if #tArgs < 1 or (tArgs[1] == "-1" and #tArgs < 2) then
	print("Usage: "..shell.getRunningProgram().." [-1] <file> [file ...]")
	print("Use -1 to print all files on 1 printer.")
	return
end
local onePrinter = false
if tArgs[1] == "-1" then
	table.remove(tArgs, 1)
	onePrinter = true
end
if not ui then
	os.loadAPI(".lmnet/apis/ui")
end
local printers = {}
for _, v in pairs(peripheral.getNames()) do
	if peripheral.getType(v) == "printer" then
		table.insert(printers, v)
	end
end
table.sort(printers)
local printedFiles = 0
local printed = {}
local selectedPrinter
if onePrinter then
	selectedPrinter = ui.menu(printers, "Select Printer")
	if not selectedPrinter then
		print("Aborting.")
		return
	end
	print("Printer: "..selectedPrinter)
end
for i = 1, #tArgs do
	if not onePrinter then
		selectedPrinter = ui.menu(printers, "Select Printer")
	end
	if not selectedPrinter then
		print("Aborting.")
	else
		if not onePrinter then
			print("Printer: "..selectedPrinter)
		end
		print(" >> "..tArgs[i])
		if not fs.exists(tArgs[i]) then
			printError(tArgs[i]..": file not found")
			sleep(1.5)
		else
			local pri = peripheral.wrap(selectedPrinter)
			pri.newPage()
			local ot
			if term.current then
				ot = term.current()
			end
			term.redirect(pri)
			local file = fs.open(shell.resolve(tArgs[i]), "r")
			print(file.readAll())
			file.close()
			if ot then
				term.redirect(ot)
			else
				term.restore()
			end
			pri.endPage()
		end
	end
end
